#LyX 1.5.1 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass article
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Visualisation
\end_layout

\begin_layout Subsection
What to visualise
\end_layout

\begin_layout Standard
In object oriented programming, using Java in our case, when creating classes
 it is common practice to group related classes into packages.
 Then completed library of the packages is distributed as Java archive (jar)
 file which based on Zip format.
 Jar files can represent a complete application and/or can be used as building
 blocks for other applications as multiple libraries.
 Jar files contain an optional manifest.mf file and potentially signature
 files.
 The structure of the jar file we interested in this project is displayed
 in figure 
\begin_inset LatexCommand ref
reference "fig:jarStructure"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/jar.jpg
	display none
	width 4cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Container structure
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:jarStructure"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Classes are usually created with properties which contain class description:
 
\end_layout

\begin_layout Itemize
modifiers: class, interface or exception
\end_layout

\begin_layout Itemize
whether or not the class is abstract 
\end_layout

\begin_layout Itemize
the class access level: public, private
\begin_inset Foot
status open

\begin_layout Standard
only inner classes can be private
\end_layout

\end_inset

 or protected
\end_layout

\begin_layout Description
Dependency cluster is a group of the elements (nodes) in the graph interconnecte
d by relationships (dependencies).
 
\end_layout

\begin_layout Standard
Often Java application consists of multiple .jar files.
 In cases like this one jar file may use one or more other jar files (jar
 level dependency - figure 
\begin_inset LatexCommand ref
reference "fig:dependenyLevels"

\end_inset

a).
 Packages have dependencies with packages belonging to the same .jar file
 and with packages belonging to different .jar files (package level dependencies
 - figure 
\begin_inset LatexCommand ref
reference "fig:dependenyLevels"

\end_inset

b).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/jars.jpg
	display none
	width 3.9cm
	height 3cm
	subcaption
	subcaptionText "Container level"

\end_inset

 
\begin_inset Graphics
	filename files/packs.jpg
	display none
	width 3.9cm
	height 3cm
	subcaption
	subcaptionText "Namespace level"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Levels of dependencies
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:dependenyLevels"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this project we are interested in class level dependencies (figure 
\begin_inset LatexCommand ref
reference "fig:classDependencies"

\end_inset

).
 Here dependency reflects whether the class contains variable instantiating
 the other class, implements an interface, extends a superclass or has a
 reference to a constant (final variable).
 This reflects the concepts of the dependency graph.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/classes.jpg
	display none
	width 4cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Class level dependencies
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:classDependencies"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Visualisation library
\end_layout

\begin_layout Standard
The prefuse visualisation toolkit
\begin_inset LatexCommand cite
key "prefuse"

\end_inset

 was used to present the visual dependency graph.
 The prefuse provides set features for data modelling, visualisation and
 interaction, and offers visual structures for tables, trees and graphs.
 The prefuse includes layouts and visual encoding techniques, interaction
 and animation.
 The prefuse is an open source Java library that contains 2D graphics and
 can be integrated into Java Swing (more accurate 2.5D grapict).
\end_layout

\begin_layout Subsection
Visual dependency graph
\end_layout

\begin_layout Standard
The example figures in this section are based on analysis of Apache commons
 collections project version 3.2 
\begin_inset LatexCommand cite
key "commomns"

\end_inset

.
\end_layout

\begin_layout Standard
Our aim is to analyse dependencies of object-oriented programs at class
 level.
 For that reason the nodes on the graph represent classes.
 The nodes are displayed with labels that contain name of the class, the
 namespace name and the container name the class belongs to, and the icon
 that reflects class properties such as class modifier (class, interface,
 exception), access (public, private), and abstractness of the class (figure
 
\begin_inset LatexCommand ref
reference "fig:nodes"

\end_inset

).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/nodes.JPG
	display none
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Visual nodes on the graph
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:nodes"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The relationships between classes are represented as directed edges on the
 visual graph (figure 
\begin_inset LatexCommand ref
reference "fig:edges"

\end_inset

).
 Every edge display a label describing the type of the relationship.
 The 
\begin_inset Quotes eld
\end_inset

uses
\begin_inset Quotes erd
\end_inset

 label means that the source class has at least one instance of the destination
 class as a variable or has a reference to a static field.
 The labels 
\begin_inset Quotes eld
\end_inset

extends
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

implements
\begin_inset Quotes erd
\end_inset

 mean that the source class extends a superclass or/and implements an interface.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/edges.JPG
	display none
	width 6cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Visual edges on the graph
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:edges"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The force directed layout is used to position visual elements of the graph
 
\begin_inset LatexCommand cite
key "fdl"

\end_inset

.
 Force directed algorithms views the graph as a virtual physical system,
 where the nodes and edges of the graph are bodies of the system.
 The nodes have anti-gravitational forces acting between them, edges act
 as springs between nodes.
 Figure 
\begin_inset LatexCommand ref
reference "fig:fdl"

\end_inset

 shows that nodes of connected clusters are held close by the edges connecting
 them, and disconnected elements are repelled from each other.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/fdl.JPG
	display none
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Force directed layout
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:fdl"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The force directed layout and its animation become ineffective or unusable
 in some cases for large graph data structures (more than 1500 nodes).
 To overcome this problem force directed layout is replaced for a static
\begin_inset Foot
status open

\begin_layout Standard
does not contain animation
\end_layout

\end_inset

 radial tree layout for the graphs that contain over 1200 nodes.
\end_layout

\begin_layout Standard
To display group of visual nodes prefuse 
\begin_inset LatexCommand cite
key "prefuse"

\end_inset

 offers visual elements called aggregates.
 Aggregates draw a border around group of visual graph nodes that contain
 the same value of the property.
 Aggregates usually filled with colour with transparency.
 For example figure 
\begin_inset LatexCommand ref
reference "fig:packAggregate"

\end_inset

 shows graph nodes that contain the same name of the package they belong
 to and figure 
\begin_inset LatexCommand ref
reference "fig:pack-clust-Aggr"

\end_inset

 shows packages and dependency clusters in the graph.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/packAggr.JPG
	display none
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Aggregates of packages
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:packAggregate"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\align center
\begin_inset Graphics
	filename files/packClustAggr.JPG
	display none
	width 8cm

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Aggregates of packages and dependency clusters
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand label
name "fig:pack-clust-Aggr"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Interaction
\end_layout

\begin_layout Standard
The prefuse visual library provides user interaction options such as pan,
 zoom, visual element drag, etc.
 The interaction contorols for zoom and pan are buttons on user interface
 and mouse events.
 
\end_layout

\begin_layout Standard
The drag of the visual element controlled only by mouse event using click
 and drag (only works for nodes and aggregates).
 The aim of interaction between user and the graph is to improve layout
 of visual elements in the way that user receives display of the analysed
 system to have similar layout to the model of the system itself.
 On user request any visual node can be moved to any position in the graph.
 In the cases when user requires to move a group of nodes the aggregates
 that represent that group must be visible.
 The drag of the group of the visual nodes occurs on mouse click and drag
 on the aggregate.
 
\end_layout

\begin_layout Standard
Dragging
\end_layout

\begin_layout Standard
Pan and zoom
\end_layout

\begin_layout Standard
Highlighting
\end_layout

\begin_layout Subsection
Future work
\end_layout

\begin_layout Standard
Super nodes
\begin_inset LatexCommand cite
key "smallWorldNetworks"

\end_inset


\end_layout

\begin_layout Standard
FDL between aggregates
\end_layout

\begin_layout Standard
Search
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "prefuse"

\end_inset

The prefuse visualization toolkit.
 
\begin_inset LatexCommand url
target "http://prefuse.org/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "shneiderman"

\end_inset

Schneiderman, B.
 1996.
 The Eyes Have It: A Task by Data Type Taxonomy for Information Visualization.
 In IEEE Conference on Visual Languages (VL'96).
 Boulder, CO: IEEE CS Press.
\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "smallWorldNetworks"

\end_inset

David Auber, Yves Chiricota, Fabien Jourdan, Guy Melançon.
 Multiscale Visualization of Small World Networks.
 
\begin_inset LatexCommand url
target "http://dept-info.labri.fr/~auber/documents/publi/auberIV03Seattle.pdf"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "commomns"

\end_inset

Apache commons collections version 3.2.
 
\begin_inset LatexCommand url
target "http://commons.apache.org/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "fdl"

\end_inset

Dr Aaron J Quigley.
 What is a Force Directed Algorithm (Spring Algorithm)? University College
 Dublin.
 
\begin_inset LatexCommand url
target "http://www.csi.ucd.ie/staff/aquigley/home/index.php?Research:Projects:FADE"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset LatexCommand bibitem
key "graphInteraction"

\end_inset

Hugo A.
 D.
 do Nascimento, A Framework for Human-Computer Interaction in Directed Graph
 Drawing 
\begin_inset LatexCommand url
target "http://delivery.acm.org/10.1145/570000/564048/p63-do_nascimento.pdf?key1=564048&key2=5530296021&coll=GUIDE&dl=&CFID=15151515&CFTOKEN=6184618"

\end_inset


\end_layout

\end_body
\end_document
